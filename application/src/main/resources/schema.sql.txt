DROP TABLE IF EXISTS T_FACTURE;

DROP TABLE IF EXISTS T_PRESTATION;

DROP TABLE IF EXISTS T_CONSULTANT;

DROP TABLE IF EXISTS T_CLIENT;

DROP TABLE IF EXISTS T_ROLE_REF;

DROP TABLE IF EXISTS T_USER_ROLE;

DROP TABLE IF EXISTS T_ROLE;

DROP TABLE IF EXISTS T_USER;

DROP TABLE IF EXISTS T_COMPANY;

DROP TABLE IF EXISTS T_ADRESSE;


CREATE TABLE T_ROLE_REF
(
     id bigint(20) NOT NULL AUTO_INCREMENT,
     role_name varchar(255) NOT NULL,  
     description varchar(255) NOT NULL,
     PRIMARY KEY ( id )
);


CREATE TABLE T_ADRESSE (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  code_postal varchar(5) NOT NULL DEFAULT 0,
  localite varchar(255) NOT NULL DEFAULT 0,
  numero varchar(100) NOT NULL DEFAULT 0 ,
  pays varchar(30) NOT NULL DEFAULT 0,
  rue varchar(255) NOT NULL DEFAULT 0,  
  PRIMARY KEY (id)
);

CREATE TABLE T_CLIENT (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  email varchar(255) NOT NULL DEFAULT 0,
  social_reason varchar(255) NOT NULL DEFAULT 0,
  adresse_id bigint(20) DEFAULT NULL REFERENCES T_ADRESSE(id),
  company_id bigint(20) DEFAULT NULL REFERENCES T_COMPANY(id),
  PRIMARY KEY (id)  
);

CREATE TABLE T_CONSULTANT (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  last_name varchar(255) NOT NULL DEFAULT 0,
  first_name varchar(255) NOT NULL DEFAULT 0,
  email varchar(255) NOT NULL DEFAULT 0,
  fonction varchar(255) NOT NULL DEFAULT 0,
  company_id bigint(20) DEFAULT NULL REFERENCES T_COMPANY(id),
  PRIMARY KEY (id)  
);


CREATE TABLE T_FACTURE (
 id bigint(20) NOT NULL AUTO_INCREMENT,
  client_prestation varchar(255) NOT NULL,
  date_echeance varchar(255) DEFAULT NULL,
  date_encaissement varchar(255) DEFAULT NULL,
  date_facturation varchar(255) DEFAULT NULL, 
  delai_paiement bigint(20) NOT NULL,
  facture_status varchar(255) DEFAULT NULL,
  file_path varchar(255) DEFAULT NULL,
  file_name varchar(255) DEFAULT NULL,
  file_content longblob DEFAULT NULL,
  frais_retard float DEFAULT NULL,
  mois_facture varchar(255) DEFAULT NULL,
  montanttva float NOT NULL,
  nb_jour_retard bigint(20) DEFAULT NULL,
  numero_commande varchar(255) NOT NULL,
  numero_facture varchar(255) DEFAULT NULL,
  prix_totalht float NOT NULL DEFAULT 0,
  prix_totalttc float NOT NULL DEFAULT 0,
  quantite float NOT NULL DEFAULT 0, 
  PRIMARY KEY (id)
 
); 


CREATE TABLE T_PRESTATION (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  client_prestation varchar(255) NOT NULL DEFAULT 0,
  delai_paiement bigint(20) NOT NULL DEFAULT 0,
  designation varchar(255) NOT NULL DEFAULT 0,
  numero_commande varchar(255) NOT NULL DEFAULT 0,
  quantite float NOT NULL DEFAULT 0,
  tarifht float(11) NOT NULL DEFAULT 0,  
  date_debut varchar(255) DEFAULT NULL,
  date_fin varchar(255) DEFAULT NULL,
  client_id bigint(20) DEFAULT NULL REFERENCES T_CLIENT(id),
  consultant_id bigint(20) REFERENCES T_CONSULTANT(id),
  facture_id bigint(20) REFERENCES T_FACTURE(id), 
  PRIMARY KEY (id)  
); 


CREATE TABLE T_COMPANY (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  code_ape varchar(255) DEFAULT NULL,
  numero_bic varchar(255) DEFAULT NULL,
  numero_iban varchar(255) DEFAULT NULL,
  numero_tva varchar(255) DEFAULT NULL,
  rcsname varchar(255) DEFAULT NULL,
  siret varchar(255) NOT NULL,
  social_reason varchar(255) NOT NULL,
  status varchar(255) NOT NULL, 
  adresse_id bigint(20),
  PRIMARY KEY (id)
  
);


CREATE TABLE T_USER ( 
  id bigint(20) NOT NULL AUTO_INCREMENT,
  user_name VARCHAR(45) NOT NULL DEFAULT 0,
  first_name VARCHAR(45) NOT NULL DEFAULT 0,
  last_name VARCHAR(45) NOT NULL DEFAULT 0,
  password VARCHAR(45) NOT NULL DEFAULT 0,
  actived TINYINT NOT NULL DEFAULT 1 , 
  company_id bigint(20) REFERENCES T_COMPANY(id),   
  PRIMARY KEY (id)
  );

CREATE TABLE T_ROLE ( 
  id bigint(20) NOT NULL AUTO_INCREMENT,  
  role_name varchar(45) NOT NULL,
  description varchar(45) NOT NULL, 
  user_id bigint(20) REFERENCES T_USER(id), 
  PRIMARY KEY (id)
  
);

  

  



/*FOREIGN KEY (user_name) REFERENCES T_USER(user_name) */

DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_CONTEXT ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_CONTEXT ;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_PARAMS ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION ;
DROP TABLE IF EXISTS BATCH_JOB_INSTANCE ;

DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_SEQ ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_SEQ ;
DROP TABLE IF EXISTS BATCH_JOB_SEQ ;



CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT ,
	JOB_NAME VARCHAR(100) NOT NULL,
	JOB_KEY VARCHAR(32) NOT NULL,
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT  ,
	JOB_INSTANCE_ID BIGINT NOT NULL,
	CREATE_TIME DATETIME(6) NOT NULL,
	START_TIME DATETIME(6) DEFAULT NULL ,
	END_TIME DATETIME(6) DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED DATETIME(6),
	JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL ,
	TYPE_CD VARCHAR(6) NOT NULL ,
	KEY_NAME VARCHAR(100) NOT NULL ,
	STRING_VAL VARCHAR(250) ,
	DATE_VAL DATETIME(6) DEFAULT NULL ,
	LONG_VAL BIGINT ,
	DOUBLE_VAL DOUBLE PRECISION ,
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT NOT NULL,
	STEP_NAME VARCHAR(100) NOT NULL,
	JOB_EXECUTION_ID BIGINT NOT NULL,
	START_TIME DATETIME(6) NOT NULL ,
	END_TIME DATETIME(6) DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	COMMIT_COUNT BIGINT ,
	READ_COUNT BIGINT ,
	FILTER_COUNT BIGINT ,
	WRITE_COUNT BIGINT ,
	READ_SKIP_COUNT BIGINT ,
	WRITE_SKIP_COUNT BIGINT ,
	PROCESS_SKIP_COUNT BIGINT ,
	ROLLBACK_COUNT BIGINT ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED DATETIME(6),
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_STEP_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_STEP_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_SEQ);








